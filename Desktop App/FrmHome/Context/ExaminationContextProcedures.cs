// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FrmHome.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FrmHome
{
    public partial class ExaminationContext
    {
        private ExaminationContextProcedures _procedures;

        public virtual ExaminationContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ExaminationContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ExaminationContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<answerExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<answerExamQuestionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<answerExamQuestion_uprotectedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<answerExamQuestionV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<Assign_Course_to_InstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Courses_and_Students_of_InstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Delete_CourseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Delete_DepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Delete_TopicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<deleteExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<deleteInstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<deleteQuestionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<deleteStudentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<End_Course_for_StudentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<End_Course_with_InstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<generateExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GET_QUESTIONS_for_STUDENT_EXAMResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Get_Questions_in_ExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAllCoursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAllDepartmentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllExamAnswersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAllExamsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAllInstructorsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAllStudentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAvailableCoursesForExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getDepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getDeptDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getInstructorsInDepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getStudentAnswerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getStudentsInDepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_CourseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_DepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_Department_With_ManagerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_InstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_StudentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_TopicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Insert_UserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insertMCQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insertQuestionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<insertTFQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<returnGradesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<setCourseNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<setTopicNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_returngradesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Student_Take_course_with_InstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Topics_of_CourseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Update_Department_ManagerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<updateInstructorDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<updateMCQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<updateStudentDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<updateTFQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<updateUserDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewCourseMCQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewCourseTFQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewExamQuestionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewMCQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewTFQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewTopicMCQResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<viewTopicTFQResult>().HasNoKey().ToView(null);
        }
    }

    public interface IExaminationContextProceduresContract
    {
        Task<int> answerExamAsync(int? std_id, int? ex_id, string answer1, string answer2, string answer3, string answer4, string answer5, string answer6, string answer7, string answer8, string answer9, string answer10, CancellationToken cancellationToken = default);
        Task<int> answerExamQuestionAsync(int? ex_id, int? q_id, string std_answer, CancellationToken cancellationToken = default);
        Task<int> answerExamQuestion_uprotectedAsync(int? std_id, int? ex_id, int? q_id, string std_answer, CancellationToken cancellationToken = default);
        Task<int> answerExamQuestionV2Async(int? std_id, int? ex_id, int? q_id, string answer, CancellationToken cancellationToken = default);
        Task<List<Assign_Course_to_InstructorResult>> Assign_Course_to_InstructorAsync(string crs_name, int? ins_id, CancellationToken cancellationToken = default);
        Task<List<Courses_and_Students_of_InstructorResult>> Courses_and_Students_of_InstructorAsync(int? ins_id, CancellationToken cancellationToken = default);
        Task<int> Delete_CourseAsync(string crs_name, CancellationToken cancellationToken = default);
        Task<int> Delete_DepartmentAsync(string dept_name, CancellationToken cancellationToken = default);
        Task<int> Delete_TopicAsync(string top_name, CancellationToken cancellationToken = default);
        Task<int> deleteExamAsync(int? ex_id, CancellationToken cancellationToken = default);
        Task<List<deleteInstructorResult>> deleteInstructorAsync(int? ins_id, CancellationToken cancellationToken = default);
        Task<int> deleteQuestionAsync(int? q_id, CancellationToken cancellationToken = default);
        Task<List<deleteStudentResult>> deleteStudentAsync(int? std_id, CancellationToken cancellationToken = default);
        Task<int> End_Course_for_StudentAsync(string crs_name, int? std_id, CancellationToken cancellationToken = default);
        Task<int> End_Course_with_InstructorAsync(string crs_name, int? ins_id, CancellationToken cancellationToken = default);
        Task<int> generateExamAsync(string crs_name, int? std_id, CancellationToken cancellationToken = default);
        Task<List<GET_QUESTIONS_for_STUDENT_EXAMResult>> GET_QUESTIONS_for_STUDENT_EXAMAsync(int? exam_id, int? stduent_id, CancellationToken cancellationToken = default);
        Task<List<Get_Questions_in_ExamResult>> Get_Questions_in_ExamAsync(int? ex_id, CancellationToken cancellationToken = default);
        Task<List<getAllCoursesResult>> getAllCoursesAsync(CancellationToken cancellationToken = default);
        Task<List<getAllDepartmentsResult>> getAllDepartmentsAsync(CancellationToken cancellationToken = default);
        Task<List<GetAllExamAnswersResult>> GetAllExamAnswersAsync(CancellationToken cancellationToken = default);
        Task<List<getAllExamsResult>> getAllExamsAsync(CancellationToken cancellationToken = default);
        Task<List<getAllInstructorsResult>> getAllInstructorsAsync(CancellationToken cancellationToken = default);
        Task<List<getAllStudentsResult>> getAllStudentsAsync(CancellationToken cancellationToken = default);
        Task<List<getAvailableCoursesForExamResult>> getAvailableCoursesForExamAsync(int? std_id, CancellationToken cancellationToken = default);
        Task<List<getDepartmentResult>> getDepartmentAsync(int? dept_id, CancellationToken cancellationToken = default);
        Task<List<getDeptDataResult>> getDeptDataAsync(int? dept_id, CancellationToken cancellationToken = default);
        Task<List<getInstructorsInDepartmentResult>> getInstructorsInDepartmentAsync(int? dept_id, CancellationToken cancellationToken = default);
        Task<List<getStudentAnswerResult>> getStudentAnswerAsync(int? exam_id, int? stduent_id, CancellationToken cancellationToken = default);
        Task<List<getStudentsInDepartmentResult>> getStudentsInDepartmentAsync(int? dept_id, CancellationToken cancellationToken = default);
        Task<List<GetUserResult>> GetUserAsync(string email, string password, CancellationToken cancellationToken = default);
        Task<List<Insert_CourseResult>> Insert_CourseAsync(string crs_name, CancellationToken cancellationToken = default);
        Task<int> Insert_DepartmentAsync(string dept_name, int? id_mgr, CancellationToken cancellationToken = default);
        Task<int> Insert_Department_With_ManagerAsync(string dept_name, string f_name, string l_name, string address, string email, string password, decimal? salary, string degree, CancellationToken cancellationToken = default);
        Task<List<Insert_InstructorResult>> Insert_InstructorAsync(string f_name, string l_name, string address, string email, string password, decimal? salary, string degree, int? dept_id, CancellationToken cancellationToken = default);
        Task<int> Insert_StudentAsync(string f_name, string l_name, string address, string email, string password, int? dept_id, CancellationToken cancellationToken = default);
        Task<int> Insert_TopicAsync(string top_name, string crs_name, CancellationToken cancellationToken = default);
        Task<int> Insert_UserAsync(string user_type, string f_name, string l_name, string address, string email, string password, CancellationToken cancellationToken = default);
        Task<int> insertMCQAsync(int? top_id, string q_text, string ch_a, string ch_b, string ch_c, string ch_d, string corr_answer, CancellationToken cancellationToken = default);
        Task<int> insertQuestionAsync(int? top_id, string q_type, string q_text, string corr_answer, CancellationToken cancellationToken = default);
        Task<int> insertTFQAsync(int? top_id, string q_text, string corr_answer, CancellationToken cancellationToken = default);
        Task<List<returnGradesResult>> returnGradesAsync(int? std_id, CancellationToken cancellationToken = default);
        Task<List<setCourseNameResult>> setCourseNameAsync(int? crs_id, string crs_name, CancellationToken cancellationToken = default);
        Task<List<setTopicNameResult>> setTopicNameAsync(int? top_id, string top_name, CancellationToken cancellationToken = default);
        Task<List<sp_returngradesResult>> sp_returngradesAsync(int? std_id, CancellationToken cancellationToken = default);
        Task<int> Student_Take_course_with_InstructorAsync(int? std_id, int? crs_id, int? ins_id, CancellationToken cancellationToken = default);
        Task<int> Topics_of_CourseAsync(string crs_name, CancellationToken cancellationToken = default);
        Task<List<Update_Department_ManagerResult>> Update_Department_ManagerAsync(string dept_name, int? mgr_id, CancellationToken cancellationToken = default);
        Task<List<updateInstructorDataResult>> updateInstructorDataAsync(string f_name, string l_name, string address, string email, decimal? salary, string degree, int? dept_id, int? ins_id, CancellationToken cancellationToken = default);
        Task<int> updateMCQAsync(int? q_id, int? top_id, string q_text, string ch_a, string ch_b, string ch_c, string ch_d, string corr_answer, CancellationToken cancellationToken = default);
        Task<List<updateStudentDataResult>> updateStudentDataAsync(string f_name, string l_name, string address, string email, int? dept_id, int? std_id, CancellationToken cancellationToken = default);
        Task<int> updateTFQAsync(int? q_id, int? top_id, string q_text, string corr_answer, CancellationToken cancellationToken = default);
        Task<int> updateUserDataAsync(int? usr_id, string f_name, string l_name, string address, string email, string password, CancellationToken cancellationToken = default);
        Task<List<viewCourseMCQResult>> viewCourseMCQAsync(string crs_name, CancellationToken cancellationToken = default);
        Task<List<viewCourseTFQResult>> viewCourseTFQAsync(string crs_name, CancellationToken cancellationToken = default);
        Task<List<viewExamQuestionsResult>> viewExamQuestionsAsync(int? ex_id, CancellationToken cancellationToken = default);
        Task<List<viewMCQResult>> viewMCQAsync(CancellationToken cancellationToken = default);
        Task<List<viewTFQResult>> viewTFQAsync(CancellationToken cancellationToken = default);
        Task<List<viewTopicMCQResult>> viewTopicMCQAsync(string top_name, CancellationToken cancellationToken = default);
        Task<List<viewTopicTFQResult>> viewTopicTFQAsync(string top_name, CancellationToken cancellationToken = default);
    }

    public partial class ExaminationContextProcedures
    {
        private readonly ExaminationContext _context;

        public ExaminationContextProcedures(ExaminationContext context)
        {
            _context = context;
        }

        public virtual async Task<int> answerExamAsync(int? std_id, int? ex_id, string answer1, string answer2, string answer3, string answer4, string answer5, string answer6, string answer7, string answer8, string answer9, string answer10, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "answer1",
                    Size = 1,
                    Value = answer1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer2",
                    Size = 1,
                    Value = answer2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer3",
                    Size = 1,
                    Value = answer3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer4",
                    Size = 1,
                    Value = answer4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer5",
                    Size = 1,
                    Value = answer5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer6",
                    Size = 1,
                    Value = answer6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer7",
                    Size = 1,
                    Value = answer7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer8",
                    Size = 1,
                    Value = answer8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer9",
                    Size = 1,
                    Value = answer9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "answer10",
                    Size = 1,
                    Value = answer10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[answerExam] @std_id, @ex_id, @answer1, @answer2, @answer3, @answer4, @answer5, @answer6, @answer7, @answer8, @answer9, @answer10", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> answerExamQuestionAsync(int? ex_id, int? q_id, string std_answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_answer",
                    Size = 1,
                    Value = std_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[answerExamQuestion] @ex_id, @q_id, @std_answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> answerExamQuestion_uprotectedAsync(int? std_id, int? ex_id, int? q_id, string std_answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_answer",
                    Size = 1,
                    Value = std_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[answerExamQuestion_uprotected] @std_id, @ex_id, @q_id, @std_answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> answerExamQuestionV2Async(int? std_id, int? ex_id, int? q_id, string answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "answer",
                    Size = 1,
                    Value = answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[answerExamQuestionV2] @std_id, @ex_id, @q_id, @answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Assign_Course_to_InstructorResult>> Assign_Course_to_InstructorAsync(string crs_name, int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Assign_Course_to_InstructorResult>("EXEC @returnValue = [dbo].[Assign_Course_to_Instructor] @crs_name, @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Courses_and_Students_of_InstructorResult>> Courses_and_Students_of_InstructorAsync(int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Courses_and_Students_of_InstructorResult>("EXEC @returnValue = [dbo].[Courses_and_Students_of_Instructor] @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Delete_CourseAsync(string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Delete_Course] @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Delete_DepartmentAsync(string dept_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_name",
                    Size = 20,
                    Value = dept_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Delete_Department] @dept_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Delete_TopicAsync(string top_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_name",
                    Size = 20,
                    Value = top_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Delete_Topic] @top_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> deleteExamAsync(int? ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[deleteExam] @ex_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<deleteInstructorResult>> deleteInstructorAsync(int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<deleteInstructorResult>("EXEC @returnValue = [dbo].[deleteInstructor] @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> deleteQuestionAsync(int? q_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[deleteQuestion] @q_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<deleteStudentResult>> deleteStudentAsync(int? std_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<deleteStudentResult>("EXEC @returnValue = [dbo].[deleteStudent] @std_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> End_Course_for_StudentAsync(string crs_name, int? std_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[End_Course_for_Student] @crs_name, @std_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> End_Course_with_InstructorAsync(string crs_name, int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[End_Course_with_Instructor] @crs_name, @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> generateExamAsync(string crs_name, int? std_id, OutputParameter<int?> ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterex_id = new SqlParameter
            {
                ParameterName = "ex_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ex_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 100,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterex_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[generateExam] @crs_name, @std_id, @ex_id OUTPUT", sqlParameters, cancellationToken);

            ex_id.SetValue(parameterex_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_QUESTIONS_for_STUDENT_EXAMResult>> GET_QUESTIONS_for_STUDENT_EXAMAsync(int? exam_id, int? stduent_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "exam_id",
                    Value = exam_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stduent_id",
                    Value = stduent_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_QUESTIONS_for_STUDENT_EXAMResult>("EXEC @returnValue = [dbo].[GET_QUESTIONS_for_STUDENT_EXAM] @exam_id, @stduent_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Questions_in_ExamResult>> Get_Questions_in_ExamAsync(int? ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Questions_in_ExamResult>("EXEC @returnValue = [dbo].[Get_Questions_in_Exam] @ex_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAllCoursesResult>> getAllCoursesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAllCoursesResult>("EXEC @returnValue = [dbo].[getAllCourses]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAllDepartmentsResult>> getAllDepartmentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAllDepartmentsResult>("EXEC @returnValue = [dbo].[getAllDepartments]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllExamAnswersResult>> GetAllExamAnswersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllExamAnswersResult>("EXEC @returnValue = [dbo].[GetAllExamAnswers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAllExamsResult>> getAllExamsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAllExamsResult>("EXEC @returnValue = [dbo].[getAllExams]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAllInstructorsResult>> getAllInstructorsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAllInstructorsResult>("EXEC @returnValue = [dbo].[getAllInstructors]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAllStudentsResult>> getAllStudentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAllStudentsResult>("EXEC @returnValue = [dbo].[getAllStudents]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAvailableCoursesForExamResult>> getAvailableCoursesForExamAsync(int? std_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAvailableCoursesForExamResult>("EXEC @returnValue = [dbo].[getAvailableCoursesForExam] @std_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getDepartmentResult>> getDepartmentAsync(int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getDepartmentResult>("EXEC @returnValue = [dbo].[getDepartment] @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getDeptDataResult>> getDeptDataAsync(int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getDeptDataResult>("EXEC @returnValue = [dbo].[getDeptData] @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getInstructorsInDepartmentResult>> getInstructorsInDepartmentAsync(int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getInstructorsInDepartmentResult>("EXEC @returnValue = [dbo].[getInstructorsInDepartment] @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getStudentAnswerResult>> getStudentAnswerAsync(int? exam_id, int? stduent_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "exam_id",
                    Value = exam_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stduent_id",
                    Value = stduent_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getStudentAnswerResult>("EXEC @returnValue = [dbo].[getStudentAnswer] @exam_id, @stduent_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getStudentsInDepartmentResult>> getStudentsInDepartmentAsync(int? dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getStudentsInDepartmentResult>("EXEC @returnValue = [dbo].[getStudentsInDepartment] @dept_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserResult>> GetUserAsync(string email, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserResult>("EXEC @returnValue = [dbo].[GetUser] @email, @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Insert_CourseResult>> Insert_CourseAsync(string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Insert_CourseResult>("EXEC @returnValue = [dbo].[Insert_Course] @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Insert_DepartmentAsync(string dept_name, int? id_mgr, OutputParameter<int?> dept_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterdept_id = new SqlParameter
            {
                ParameterName = "dept_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dept_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_name",
                    Size = 20,
                    Value = dept_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "id_mgr",
                    Value = id_mgr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterdept_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Insert_Department] @dept_name, @id_mgr, @dept_id OUTPUT", sqlParameters, cancellationToken);

            dept_id.SetValue(parameterdept_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Insert_Department_With_ManagerAsync(string dept_name, string f_name, string l_name, string address, string email, string password, decimal? salary, string degree, OutputParameter<int?> dept_id, OutputParameter<int?> mgr_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterdept_id = new SqlParameter
            {
                ParameterName = "dept_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = dept_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametermgr_id = new SqlParameter
            {
                ParameterName = "mgr_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = mgr_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_name",
                    Size = 100,
                    Value = dept_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salary",
                    Precision = 19,
                    Scale = 4,
                    Value = salary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "degree",
                    Size = 50,
                    Value = degree ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterdept_id,
                parametermgr_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Insert_Department_With_Manager] @dept_name, @f_name, @l_name, @address, @email, @password, @salary, @degree, @dept_id OUTPUT, @mgr_id OUTPUT", sqlParameters, cancellationToken);

            dept_id.SetValue(parameterdept_id.Value);
            mgr_id.SetValue(parametermgr_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Insert_InstructorResult>> Insert_InstructorAsync(string f_name, string l_name, string address, string email, string password, decimal? salary, string degree, int? dept_id, OutputParameter<int?> ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterins_id = new SqlParameter
            {
                ParameterName = "ins_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ins_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salary",
                    Precision = 19,
                    Scale = 4,
                    Value = salary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "degree",
                    Size = 50,
                    Value = degree ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterins_id,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Insert_InstructorResult>("EXEC @returnValue = [dbo].[Insert_Instructor] @f_name, @l_name, @address, @email, @password, @salary, @degree, @dept_id, @ins_id OUTPUT", sqlParameters, cancellationToken);

            ins_id.SetValue(parameterins_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Insert_StudentAsync(string f_name, string l_name, string address, string email, string password, int? dept_id, OutputParameter<int?> stu_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterstu_id = new SqlParameter
            {
                ParameterName = "stu_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = stu_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterstu_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Insert_Student] @f_name, @l_name, @address, @email, @password, @dept_id, @stu_id OUTPUT", sqlParameters, cancellationToken);

            stu_id.SetValue(parameterstu_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Insert_TopicAsync(string top_name, string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_name",
                    Size = 20,
                    Value = top_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Insert_Topic] @top_name, @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Insert_UserAsync(string user_type, string f_name, string l_name, string address, string email, string password, OutputParameter<int?> usr_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterusr_id = new SqlParameter
            {
                ParameterName = "usr_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = usr_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "user_type",
                    Size = 1,
                    Value = user_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterusr_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [PRIVATE].[Insert_User] @user_type, @f_name, @l_name, @address, @email, @password, @usr_id OUTPUT", sqlParameters, cancellationToken);

            usr_id.SetValue(parameterusr_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insertMCQAsync(int? top_id, string q_text, string ch_a, string ch_b, string ch_c, string ch_d, string corr_answer, OutputParameter<int?> q_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterq_id = new SqlParameter
            {
                ParameterName = "q_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = q_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_id",
                    Value = top_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_text",
                    Size = 300,
                    Value = q_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_a",
                    Size = 300,
                    Value = ch_a ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_b",
                    Size = 300,
                    Value = ch_b ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_c",
                    Size = 300,
                    Value = ch_c ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_d",
                    Size = 300,
                    Value = ch_d ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "corr_answer",
                    Size = 1,
                    Value = corr_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterq_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insertMCQ] @top_id, @q_text, @ch_a, @ch_b, @ch_c, @ch_d, @corr_answer, @q_id OUTPUT", sqlParameters, cancellationToken);

            q_id.SetValue(parameterq_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insertQuestionAsync(int? top_id, string q_type, string q_text, string corr_answer, OutputParameter<int?> q_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterq_id = new SqlParameter
            {
                ParameterName = "q_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = q_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_id",
                    Value = top_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_type",
                    Size = 3,
                    Value = q_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "q_text",
                    Size = 300,
                    Value = q_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "corr_answer",
                    Size = 1,
                    Value = corr_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterq_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [PRIVATE].[insertQuestion] @top_id, @q_type, @q_text, @corr_answer, @q_id OUTPUT", sqlParameters, cancellationToken);

            q_id.SetValue(parameterq_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> insertTFQAsync(int? top_id, string q_text, string corr_answer, OutputParameter<int?> q_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterq_id = new SqlParameter
            {
                ParameterName = "q_id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = q_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_id",
                    Value = top_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_text",
                    Size = 300,
                    Value = q_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "corr_answer",
                    Size = 1,
                    Value = corr_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterq_id,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insertTFQ] @top_id, @q_text, @corr_answer, @q_id OUTPUT", sqlParameters, cancellationToken);

            q_id.SetValue(parameterq_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<returnGradesResult>> returnGradesAsync(int? std_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<returnGradesResult>("EXEC @returnValue = [dbo].[returnGrades] @std_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<setCourseNameResult>> setCourseNameAsync(int? crs_id, string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 50,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<setCourseNameResult>("EXEC @returnValue = [dbo].[setCourseName] @crs_id, @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<setTopicNameResult>> setTopicNameAsync(int? top_id, string top_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_id",
                    Value = top_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "top_name",
                    Size = 50,
                    Value = top_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<setTopicNameResult>("EXEC @returnValue = [dbo].[setTopicName] @top_id, @top_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_returngradesResult>> sp_returngradesAsync(int? std_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_returngradesResult>("EXEC @returnValue = [dbo].[sp_returngrades] @std_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Student_Take_course_with_InstructorAsync(int? std_id, int? crs_id, int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "crs_id",
                    Value = crs_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Student_Take_course_with_Instructor] @std_id, @crs_id, @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Topics_of_CourseAsync(string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 20,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Topics_of_Course] @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Update_Department_ManagerResult>> Update_Department_ManagerAsync(string dept_name, int? mgr_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dept_name",
                    Size = 20,
                    Value = dept_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mgr_id",
                    Value = mgr_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Update_Department_ManagerResult>("EXEC @returnValue = [dbo].[Update_Department_Manager] @dept_name, @mgr_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<updateInstructorDataResult>> updateInstructorDataAsync(string f_name, string l_name, string address, string email, decimal? salary, string degree, int? dept_id, int? ins_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salary",
                    Precision = 19,
                    Scale = 4,
                    Value = salary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "degree",
                    Size = 50,
                    Value = degree ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ins_id",
                    Value = ins_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<updateInstructorDataResult>("EXEC @returnValue = [dbo].[updateInstructorData] @f_name, @l_name, @address, @email, @salary, @degree, @dept_id, @ins_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updateMCQAsync(int? q_id, int? top_id, string q_text, string ch_a, string ch_b, string ch_c, string ch_d, string corr_answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "top_id",
                    Value = top_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_text",
                    Size = 300,
                    Value = q_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_a",
                    Size = 300,
                    Value = ch_a ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_b",
                    Size = 300,
                    Value = ch_b ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_c",
                    Size = 300,
                    Value = ch_c ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ch_d",
                    Size = 300,
                    Value = ch_d ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "corr_answer",
                    Size = 1,
                    Value = corr_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updateMCQ] @q_id, @top_id, @q_text, @ch_a, @ch_b, @ch_c, @ch_d, @corr_answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<updateStudentDataResult>> updateStudentDataAsync(string f_name, string l_name, string address, string email, int? dept_id, int? std_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept_id",
                    Value = dept_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "std_id",
                    Value = std_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<updateStudentDataResult>("EXEC @returnValue = [dbo].[updateStudentData] @f_name, @l_name, @address, @email, @dept_id, @std_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updateTFQAsync(int? q_id, int? top_id, string q_text, string corr_answer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "q_id",
                    Value = q_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "top_id",
                    Value = top_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "q_text",
                    Size = 300,
                    Value = q_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "corr_answer",
                    Size = 1,
                    Value = corr_answer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updateTFQ] @q_id, @top_id, @q_text, @corr_answer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updateUserDataAsync(int? usr_id, string f_name, string l_name, string address, string email, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "usr_id",
                    Value = usr_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "f_name",
                    Size = 50,
                    Value = f_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "l_name",
                    Size = 50,
                    Value = l_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 150,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 90,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updateUserData] @usr_id, @f_name, @l_name, @address, @email, @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewCourseMCQResult>> viewCourseMCQAsync(string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 100,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewCourseMCQResult>("EXEC @returnValue = [dbo].[viewCourseMCQ] @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewCourseTFQResult>> viewCourseTFQAsync(string crs_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "crs_name",
                    Size = 100,
                    Value = crs_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewCourseTFQResult>("EXEC @returnValue = [dbo].[viewCourseTFQ] @crs_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewExamQuestionsResult>> viewExamQuestionsAsync(int? ex_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ex_id",
                    Value = ex_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewExamQuestionsResult>("EXEC @returnValue = [dbo].[viewExamQuestions] @ex_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewMCQResult>> viewMCQAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewMCQResult>("EXEC @returnValue = [dbo].[viewMCQ]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewTFQResult>> viewTFQAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewTFQResult>("EXEC @returnValue = [dbo].[viewTFQ]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewTopicMCQResult>> viewTopicMCQAsync(string top_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_name",
                    Size = 200,
                    Value = top_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewTopicMCQResult>("EXEC @returnValue = [dbo].[viewTopicMCQ] @top_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<viewTopicTFQResult>> viewTopicTFQAsync(string top_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "top_name",
                    Size = 200,
                    Value = top_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<viewTopicTFQResult>("EXEC @returnValue = [dbo].[viewTopicTFQ] @top_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
