// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FrmHome.Entities;

namespace FrmHome
{
    public partial class ExaminationContext : DbContext
    {
        public ExaminationContext()
        {
        }

        public ExaminationContext(DbContextOptions<ExaminationContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<Course_Attendance> Course_Attendance { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Exam> Exam { get; set; }
        public virtual DbSet<Exam_Answer> Exam_Answer { get; set; }
        public virtual DbSet<Exam_Question> Exam_Question { get; set; }
        public virtual DbSet<Ins_Course> Ins_Course { get; set; }
        public virtual DbSet<Instructor> Instructor { get; set; }
        public virtual DbSet<MCQ> MCQ { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<Topic> Topic { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<v_Instructor> v_Instructor { get; set; }
        public virtual DbSet<v_Students> v_Students { get; set; }

        public virtual DbSet<CourseMCQ> CourseMCQs { get; set; }

        public virtual DbSet<CourseTFQ> CourseTFQs { get; set; }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Examination;Integrated Security=True;TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasKey(e => e.crs_id)
                    .HasName("PK__Course__ECAF5375C992DD2E");

                entity.HasIndex(e => e.crs_name)
                    .HasName("UQ__Course__775BF427FE3B898B")
                    .IsUnique();

                entity.Property(e => e.crs_name).IsUnicode(false);
            });

            modelBuilder.Entity<Course_Attendance>(entity =>
            {
                entity.HasKey(e => new { e.crs_id, e.std_id, e.ins_id })
                    .HasName("PK__Course_A__7D83C003535CF486");

                entity.Property(e => e.grade).HasComputedColumnSql("([dbo].[getStudentGrade]([crs_id],[std_id]))");

                entity.HasOne(d => d.crs_)
                    .WithMany(p => p.Course_Attendances)
                    .HasForeignKey(d => d.crs_id)
                    .HasConstraintName("FK__Course_At__crs_i__456A2145");

                entity.HasOne(d => d.ins_)
                    .WithMany(p => p.Course_Attendances)
                    .HasForeignKey(d => d.ins_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Course_At__ins_i__475269B7");

                entity.HasOne(d => d.std_)
                    .WithMany(p => p.Course_Attendances)
                    .HasForeignKey(d => d.std_id)
                    .HasConstraintName("FK__Course_At__std_i__465E457E");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.dept_id)
                    .HasName("PK__Departme__DCA6597496515059");

                entity.HasIndex(e => e.dept_name)
                    .HasName("UQ__Departme__C7D39AE1B463FEAC")
                    .IsUnique();

                entity.Property(e => e.dept_name).IsUnicode(false);

                entity.HasOne(d => d.mgr_)
                    .WithMany(p => p.Departments)
                    .HasForeignKey(d => d.mgr_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Departmen__mgr_i__4FE7AFB8");
            });

            modelBuilder.Entity<Exam>(entity =>
            {
                entity.HasKey(e => e.ex_id)
                    .HasName("PK__Exam__F6D3E4897CBDCC4A");

                entity.Property(e => e.date).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.crs_)
                    .WithMany(p => p.Exams)
                    .HasForeignKey(d => d.crs_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Exam__crs_id__597119F2");
            });

            modelBuilder.Entity<Exam_Answer>(entity =>
            {
                entity.HasKey(e => new { e.std_id, e.ex_id, e.q_id })
                    .HasName("PK__Exam_Ans__955222416F2D5E83");

                entity.Property(e => e.std_answer).IsUnicode(false);

                entity.Property(e => e.std_mark).HasComputedColumnSql("([dbo].[getQuestionMark]([q_id],[ex_id]))");

                entity.HasOne(d => d.ex_)
                    .WithMany(p => p.Exam_Answers)
                    .HasForeignKey(d => d.ex_id)
                    .HasConstraintName("FK__Exam_Answ__ex_id__601E1781");

                entity.HasOne(d => d.q_)
                    .WithMany(p => p.Exam_Answers)
                    .HasForeignKey(d => d.q_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exam_Answer_fk_1");

                entity.HasOne(d => d.std_)
                    .WithMany(p => p.Exam_Answers)
                    .HasForeignKey(d => d.std_id)
                    .HasConstraintName("FK__Exam_Answ__std_i__5F29F348");
            });

            modelBuilder.Entity<Exam_Question>(entity =>
            {
                entity.HasKey(e => new { e.ex_id, e.q_id })
                    .HasName("PK__Exam_Que__E5067FB882A51AFA");

                entity.HasOne(d => d.ex_)
                    .WithMany(p => p.Exam_Questions)
                    .HasForeignKey(d => d.ex_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Exam_Ques__ex_id__5C4D869D");

                entity.HasOne(d => d.q_)
                    .WithMany(p => p.Exam_Questions)
                    .HasForeignKey(d => d.q_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exam_Question_fk_1");
            });

            modelBuilder.Entity<Ins_Course>(entity =>
            {
                entity.HasKey(e => new { e.crs_id, e.ins_id })
                    .HasName("c_CA_PK");

                entity.HasOne(d => d.crs_)
                    .WithMany(p => p.Ins_Courses)
                    .HasForeignKey(d => d.crs_id)
                    .HasConstraintName("FK__Ins_Cours__crs_i__4A2ED662");

                entity.HasOne(d => d.ins_)
                    .WithMany(p => p.Ins_Courses)
                    .HasForeignKey(d => d.ins_id)
                    .HasConstraintName("FK__Ins_Cours__ins_i__4B22FA9B");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.HasKey(e => e.ins_id)
                    .HasName("PK__Instruct__9CB72D20B905F7A6");

                entity.Property(e => e.ins_id).ValueGeneratedNever();

                entity.Property(e => e.degree).IsUnicode(false);

                entity.Property(e => e.hire_date).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.dept_)
                    .WithMany(p => p.Instructors)
                    .HasForeignKey(d => d.dept_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Instructor_fk_1");

                entity.HasOne(d => d.ins_)
                    .WithOne(p => p.Instructor)
                    .HasForeignKey<Instructor>(d => d.ins_id)
                    .HasConstraintName("FK__Instructo__ins_i__3FB147EF");
            });

            modelBuilder.Entity<MCQ>(entity =>
            {
                entity.HasKey(e => e.q_id)
                    .HasName("PK__MCQ__3D59B310CF63646A");

                entity.Property(e => e.q_id).ValueGeneratedNever();

                entity.Property(e => e.ch_a).IsUnicode(false);

                entity.Property(e => e.ch_b).IsUnicode(false);

                entity.Property(e => e.ch_c).IsUnicode(false);

                entity.Property(e => e.ch_d).IsUnicode(false);

                entity.HasOne(d => d.q_)
                    .WithOne(p => p.MCQ)
                    .HasForeignKey<MCQ>(d => d.q_id)
                    .HasConstraintName("FK__MCQ__q_id__6A9BA5F4");
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.HasKey(e => e.q_id)
                    .HasName("PK__Question__3D59B31040796FA9");

                entity.Property(e => e.corr_answer).IsUnicode(false);

                entity.Property(e => e.q_text).IsUnicode(false);

                entity.Property(e => e.q_type).IsUnicode(false);

                entity.HasOne(d => d.top_)
                    .WithMany(p => p.Questions)
                    .HasForeignKey(d => d.top_id)
                    .HasConstraintName("FK__Question__top_id__63EEA865");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.HasKey(e => e.std_id)
                    .HasName("PK__Student__0B0245BA41C789B7");

                entity.Property(e => e.std_id).ValueGeneratedNever();

                entity.HasOne(d => d.dept_)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.dept_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Student_fk_1");

                entity.HasOne(d => d.std_)
                    .WithOne(p => p.Student)
                    .HasForeignKey<Student>(d => d.std_id)
                    .HasConstraintName("FK__Student__std_id__3BE0B70B");
            });

            modelBuilder.Entity<Topic>(entity =>
            {
                entity.HasKey(e => e.top_id)
                    .HasName("PK__Topic__B582A63DE9553A0C");

                entity.HasIndex(e => e.top_name)
                    .HasName("UQ__Topic__A87EDAD63993765A")
                    .IsUnique();

                entity.Property(e => e.top_name).IsUnicode(false);

                entity.HasOne(d => d.crs_)
                    .WithMany(p => p.Topics)
                    .HasForeignKey(d => d.crs_id)
                    .HasConstraintName("FK__Topic__crs_id__55A0890E");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.usr_id)
                    .HasName("PK__User__60621ABCAEDF4C91");

                entity.HasIndex(e => e.email)
                    .HasName("UQ__User__AB6E61640B323CF4")
                    .IsUnique();

                entity.Property(e => e.address).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.f_name).IsUnicode(false);

                entity.Property(e => e.hashed_password).IsUnicode(false);

                entity.Property(e => e.l_name).IsUnicode(false);

                entity.Property(e => e.user_type).IsUnicode(false);
            });

            modelBuilder.Entity<v_Instructor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Instructor");

                entity.Property(e => e.address).IsUnicode(false);

                entity.Property(e => e.degree).IsUnicode(false);

                entity.Property(e => e.dept_name).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.f_name).IsUnicode(false);

                entity.Property(e => e.l_name).IsUnicode(false);
            });

            modelBuilder.Entity<v_Students>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Students");

                entity.Property(e => e.address).IsUnicode(false);

                entity.Property(e => e.dept_name).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.f_name).IsUnicode(false);

                entity.Property(e => e.l_name).IsUnicode(false);
            });

            modelBuilder.Entity<CourseMCQ>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.q_id);
                entity.Property(e => e.crs_name);
                entity.Property(e => e.top_name);
                entity.Property(e => e.q_text);
                entity.Property(e => e.ch_a);
                entity.Property(e => e.ch_b);
                entity.Property(e => e.ch_c);
                entity.Property(e => e.ch_d);
                entity.Property(e => e.corr_answer);
            });

            modelBuilder.Entity<CourseTFQ>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.q_id);
                entity.Property(e => e.crs_name);
                entity.Property(e => e.top_name);
                entity.Property(e => e.q_text);
                entity.Property(e => e.corr_answer);
            });


            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}